parameters:
  - name: stageId
    type: string

  - name: dependsOn
    type: string
    default: ""

  - name: env
    type: string

  - name: environmentName
    type: string

  - name: resourceGroupName
    type: string

  - name: serviceConnection
    type: string

  - name: notebooksPath
    type: string

  - name: spid
    type: string

  - name: spkey
    type: string

  - name: workspaceName
    type: string

stages:
  - stage: "${{ parameters.stageId }}"
    displayName: "Deploying to [${{ upper(parameters.env) }}] Environment"
    dependsOn: ${{ parameters.dependsOn }}
    jobs:
      - deployment: Deploy
        #dependsOn: ${{ parameters.dependsOn }}
        displayName: "Deploying Databricks Notebooks"
        environment: ${{ parameters.environmentName }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                - task: AzureCLI@2
                  inputs:
                    azureSubscription: ${{parameters.serviceConnection}}
                    scriptType: "pscore"
                    scriptLocation: "inlineScript"
                    inlineScript: |
                      az config set extension.use_dynamic_install=yes_without_prompt

                      $databricksWorkspace = (az resource list --resource-group ${{parameters.resourceGroupName}} --query "[?type=='Microsoft.Databricks/workspaces']" | Convertfrom-Json)[0]
                     
                      $workspaceName = "${{ parameters.workspaceName }}"
                      $databricksWorkspace = (az resource list --resource-group ${{parameters.resourceGroupName}} --query "[?type=='Microsoft.Databricks/workspaces']" | ConvertFrom-Json | Where-Object { $_.name -eq $workspaceName })[0]
                      Write-Host "Databricks Workspace: $databricksWorkspace"
                     
                      $databricksWorkspaceInfo = (az databricks workspace show --ids $databricksWorkspace.id | ConvertFrom-Json)
                     

                      Install-Module -Name azure.databricks.cicd.tools -Force -Scope CurrentUser
                      Import-Module -Name azure.databricks.cicd.tools
                      #$bearerToken = $(Build.Repository.LocalPath)/DatabricksToken.ps1 -databricksWorkspaceResourceId $databricksWorkspaceInfo.id -databricksWorkspaceUrl $databricksWorkspaceInfo.workspaceUrl
                      $bearerToken = $(Build.Repository.LocalPath)/DatabricksToken.ps1 `
                          -databricksWorkspaceResourceId $databricksWorkspaceInfo.id `
                          -databricksWorkspaceUrl $databricksWorkspaceInfo.workspaceUrl `
                          -spid  ${{ parameters.spid }} `
                          -spkey  ${{ parameters.spkey }}

                      Import-DatabricksFolder -BearerToken $bearerToken -Region $databricksWorkspaceInfo.location -LocalPath $(Build.Repository.LocalPath)/${{parameters.notebooksPath}} -DatabricksPath '/live' -Clean

